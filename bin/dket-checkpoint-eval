#!/usr/bin/env python

import argparse
import logging
import json
import os
import sys

import tensorflow as tf

from dket import configurable
from dket import logutils
from dket import runtime
from dket.model import Model, ModelInputs

PATH = os.path.realpath(__file__)
BASE = os.path.dirname(PATH)
EVAL = tf.contrib.learn.ModeKeys.EVAL

# pylint: disable=C0103,C0301,I0011
parser = argparse.ArgumentParser(prog='dket-checkpoint-eval')
parser.add_argument('--config', type=str, required=True, help='The config.json configuration file of the experiment.')
parser.add_argument('--logdir', type=str, help='The basic logging directory', default=None)
parser.add_argument('--checkpoint', type=str, help='The checkpoints to be evaluated.')
parser.add_argument('--log-level', type=str, default='INFO', help='The log level.')
parser.add_argument('--log-to-stderr', action='store_true', help='Log to the stderr.')
# pylint: enable=C0103,C0301,I0011
ARGS = parser.parse_args()


def _abs_file_paths(base, patterns):
    return ','.join([
        os.path.abspath(
            os.path.join(base, p))
        for p in patterns.split(',')])


def load_evaluation(config, logdir):
    """Load the evaluation process."""
    basedir, _ = tuple(os.path.split(config))
    params = json.load(open(ARGS.config))
    files = _abs_file_paths(basedir, params[runtime.Experiment.EVAL_FILES_KEY])
    print(files)

    device = params[runtime.Experiment.EVAL_DEVICE_KEY]
    mclz = params[runtime.Experiment.MODEL_CLASS_KEY]
    mparams = params[runtime.Experiment.MODEL_PARAMS_KEY]
    mparams[Model.INPUT_PARAMS_PK][ModelInputs.FILES_PK] = files
    mparams[Model.INPUT_PARAMS_PK][ModelInputs.EPOCHS_PK] = 1
    with tf.device(device):
        model = configurable.factory(mclz, EVAL, mparams, 'dket.model')
        dumpdir = os.path.join(logdir, 'dump')

    evaluation = runtime.Evaluation(
        model=model,
        logdir=logdir,
        steps=0,
        metrics=runtime.get_metrics(),
        dumpdir=dumpdir)
    return evaluation


if __name__ == '__main__':
    try:
        LOG = os.path.join(ARGS.logdir, 'ckpt-eval.log')
        logutils.config(level=ARGS.log_level, fpath=LOG, stderr=ARGS.log_to_stderr)
        logging.info('executing: %s', PATH)
        logging.info('python version: %s', sys.version.replace('\n', ' '))
        logging.debug('--config: %s', ARGS.config)
        logging.debug('--logdir: %s', ARGS.logdir)
        logging.debug('--checkpoint: %s', ARGS.checkpoint)
        logging.debug('--log-level: %s', ARGS.log_level)
        logging.debug('--log-to-stderr: %s', str(ARGS.log_to_stderr))

        EVAL = load_evaluation(ARGS.config, ARGS.logdir)
        EVAL.start(ARGS.checkpoint)
        
    except Exception as exc:  # pylint: disable=W0703
        logging.exception(exc)
        sys.exit(1)
    sys.exit(0)